Lista de atividades - Algoritmos de ordenação, árvores e grafos

Referência de estudo de algoritmos de ordenação: https://www.geeksforgeeks.org/sorting-algorithms/
Referência de estudo de árvores: https://www.geeksforgeeks.org/introduction-to-tree-data-structure-and-algorithm-tutorials/
Referência de estudo de grafos: https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/

Para todas as atividades, escolha uma linguagem de programação de sua preferência. Recomenda-se o C#, que foi a linguagem utilizada em sala durante a disciplina.
As atividades podem ser feitas em aplicações de texto em console ou visualmente em uma game engine.
Os nomes dos campos e funções são sugestões. As estruturas podem ser implementadas de maneiras diferentes, desde que atendam a funcionalidade esperada.

Lembrando que a nota é composta pelos Resultados de Aprendizagem da disciplina, com diferentes pesos:
	RA1(3.0) - Identifica qual é a estrutura de dados mais adequada para a resolução de um problema real.
	RA2(5.0) - Programa estruturas de dados e algoritmos, organizando-os em uma biblioteca de classes.
	RA3(2.0) - Reconhece diferentes estratégias para otimização e performance, considerando uso da memória e processador.
	
1 - Algoritmos de ordenação
	Elabore um programa que orderna uma lista de itens de um jogo de acordo com os critérios escolhidos pelo jogador. A lista de itens deve conter as características: Nome, dano e cooldown.
	
	Sugestão de lista:
	nome       | dano | cooldown 
	----------------------------
	espada     |  2.0 | 1.0
	machado    | 10.0 | 3.5
	adaga      |  0.8 | 0.5
	punhos     |  0.2 | 0.3
	arco       |  1.5 | 1.5
	alabarda   |  3.0 | 2.5
	estilingue |  0.3 | 2.0
	marreta    |  7.0 | 2.5
	pique      |  2.5 | 1.0
	cutelo     |  1.5 | 0.8
	
	
	1.1 - Critérios de ordenação (RA1)
		Permita que o jogador possa escolher entre os seguintes critérios de ordenação, em ordem crescente e decrescente:
		a. Dano
		b. Cooldown
		c. Dano por segundo (dano / cooldown)
		d. Ordem alfabética
	1.2 - Seleção de algoritmos (RA2)
		Permita a escolha do algoritmo de ordenação dos itens. Inclua pelo menos os seguintes algoritmos:
		a. Bubble Sort
		b. Selection Sort
		c. Merge Sort
		d. Quick Sort
	1.3 - Análise (RA3)
		Para cada algoritmo de ordenação utilizado, faça a análise de complexidade (Notação Big O). Justifique como e porque a complexidade de tempo do algoritmo se comporta em relação ao número de itens na lista de itens.

2 - Árvores
	2.1 - TreeNode(RA2)
		Implemente a representação da estrutura de dados árvore. Cada nó da árvore deve conter um número arbitrário de nós filhos, e cada nó filho deve poder referenciar o nó pai.
		
		Campos:
			value - O valor carregado por este nó.
			parent - TreeNode pai deste nó.
			children - TreeNodes filhos deste nó.
			
		Funções:
			AddChild() - Adiciona um novo nó filho.
			GetChild(index) - Acessa um nó filho baseado em um índice.

	2.2 - Enciclopédia(RA1 e RA2)
		Utilizando sua própria implementação do TreeNode, crie um programa para a navegação da enciclopédia de um jogo. Não é obrigatório criar uma estrutura específica para a árvore, apenas para os nós.
		A enciclopédia conta com um nó raiz, nós de categoria e nós de itens/habilidade/consumível. Cada nó possui um título e uma descrição.
		
		a. A navegação inicia no nó raiz.
		b. No início e após cada seleção, título e descrição do nó atual são exibidos.
		c. O usuário pode escolher se aprofundar para cada um dos filhos do nó atual.
		d. O usuário pode escolher retornar ao nó pai do nó atual, salvo quando já está no nó raiz.	


		Sugestão de dados:
		
		O nó raiz é o início da árvore.
		Nós de categoria são filhos do nó raiz.
		Nós de arma são filhos do nó de categoria "armas".
		Nós de habilidade são filhos do nó de categoria "habilidades".
		Nós de consumível são filhos do nó de categoria "consumíveis".
		
		Tipo       | Título      | Descrição
		--------------------------------------
		RAIZ       | boas vindas | Seja bem-vindo à enciclopédia!
		
		CATEGORIA  | armas       | A arma correta é essencial para seu sucesso em uma batalha.
		CATEGORIA  | habilidades | Habilidades definem sua capacidade de combate.
		CATEGORIA  | consumíveis | Consumíveis dão vantagens temporárias em batalha.
		
		ARMA       | punhos      | Quando todos recursos se esgotam, é preciso lutar com as próprias mãos.
		ARMA       | espada      | Com uma lâmina afiada, a espada é uma opção bastante versátil.
		ARMA       | arco        | Ideal para os antissociais, permite atingir os adversários de longe.
		
		HABILIDADE | defesa      | Quanto maior a habilidade de defesa, menor o dano tomado ao receber um ataque.
		HABILIDADE | ataque      | Quanto maior a habilidade de ataque, maior o dano aplicado ao usar uma arma.
		
		CONSUMÍVEL | curativo    | Restaura imediatamente um pouco dos seus pontos de vida.
		CONSUMÍVEL | fruta       | Sacia a fome, evitando a perda de pontos de vida.
		CONSUMÍVEL | água        | Sacia a sede, evitanto a perda de pontos de vida.
		
3 - Grafos
	3.1 - GraphNode(RA2)
		Implemente a estrutura que representa um nó de um grafo. Cada nó pode conter um número arbitrário de vizinhos.
		
		Campos:
			value - O valor carregado por este nó.
			neighbors - Os vizinhos deste nó.
			
		Funções:
			Connect(other) - Conecta este nó a outro.
			BidirectionalConnect(other) - Conecta este nó a outro e o outro nó a este.
			
	3.2 - Grafo de habilidades(RA1 e RA2)
		Elabore um programa interativo que utiliza grafos para representar a árvore de habilidade de um jogo. Cada habilidade tem um custo de XP e afeta os atributos do jogador de formas diferentes. O jogador possui os atributos ataque, defesa e velocidade.
		
		REGRAS:
		- O jogador inicia com apenas uma habilidade base ativa.
		- O jogador ganha XP com o passar do tempo ou ao fazer alguma ação.
		- O jogador pode listar todos as habilidades disponíveis para compra.
		- Uma habilidade só pode ser comprada se o XP do jogador é maior ou igual ao custo da habilidade.
		- Uma habilidade só pode ser comprada se ao menos uma habilidade vizinha já ativa.
		- O programa deve exibir os atributos do jogador(ataque/defesa/velocidade), afetados pelas habilidades ativas.
		- O programa deve exibir, sem ordem específica, uma lista completa de todas habilidades ativas e inativas.
		
		Sugestão de dados:
		
		Nome          | estado inicial | custo  | ataque | defesa | velocidade
		-----------------------------------------------------------------------
		Base          | ativo          |  0     | 1      | 1      | 1
		Ataque I      | inativo        | 10     | 1      | 0      | 0
		Ataque II     | inativo        | 20     | 2      | 0      | 0
		Defesa I      | inativo        | 10     | 0      | 1      | 0
		Defesa II     | inativo        | 20     | 0      | 2      | 0
		Velocidade I  | inativo        | 10     | 0      | 0      | 1
		Velocidade II | inativo        | 20     | 0      | 0      | 2
		Esquiva I     | inativo        | 10     | 0      | 1      | 1
		Esquiva II    | inativo        | 20     | 0      | 1      | 1
		Soco I        | inativo        | 10     | 1      | 0      | 0
		Soco II       | inativo        | 20     | 1      | 1      | 0
		Chute I       | inativo        | 10     | 1      | 0      | 0
		Chute II      | inativo        | 20     | 1      | 0      | 1
		Bloqueio      | inativo        | 30     | 1      | 1      | 1
		Rasteira      | inativo        | 30     | 1      | 1      | 1
		
		A conexão dos nós pode ser feita como desejado.